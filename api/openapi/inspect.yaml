openapi: 3.0.0

info:
  title: Inspect-state HTTP API for Cartesi Rollups
  version: 0.7.0
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

  description: |
    API that allows the DApp frontend to make inspect-state requests to the DApp backend.

paths:
  inspect/{dapp}:
    post:
      operationId: inspect_post
      summary: Inspect DApp state via POST
      description: |
        This POST method sends an inspect-state request to the DApp backend, using the body contents as a binary payload for the inspect method.

        The response includes a status string and reports generated by the DApp backend. If an exception occurs, the `exception_payload` field will contain the exception details; otherwise, this field will be null.

        The inspect operation is executed on a temporary fork of the machine created upon request arrival, which is discarded afterward. Note that this method is synchronous and not recommended for resource-intensive operations.

      parameters:
        - in: path
          name: dapp
          description: dapp name or address
          required: true
          schema:
            type: string

      requestBody:
        description: Binary payload
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary

      responses:
        "200":
          description: Inspect state response.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InspectResult"

        default:
          description: Error response.
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    InspectResult:
      type: object
      properties:
        status:
          $ref: "#/components/schemas/CompletionStatus"
        exception_payload:
          $ref: "#/components/schemas/Payload"
        reports:
          type: array
          items:
            $ref: "#/components/schemas/Report"
        processed_input_count:
          type: integer
          description: Number of processed inputs since genesis
          example: 0
      required:
        - status
        - exception_payload
        - reports
        - processed_input_count

    CompletionStatus:
      type: string
      description: Whether inspection completed or not (and why not)
      enum:
        [
          Accepted,
          Rejected,
          Exception,
          MachineHalted,
          CycleLimitExceeded,
          TimeLimitExceeded,
        ]
      example: "Accepted"

    Payload:
      type: string
      description: |
        Payload in the Ethereum hex binary format.
        The first two characters are '0x' followed by pairs of hexadecimal numbers that correspond to one byte.
        For instance, '0xdeadbeef' corresponds to a payload with length 4 and bytes 222, 173, 190, 175.
        An empty payload is represented by the string '0x'.
      example: "0xdeadbeef"
      pattern: "^0x([0-9a-fA-F]{2})*$"
      format: hex

    Report:
      type: object
      properties:
        payload:
          $ref: "#/components/schemas/Payload"
      required:
        - payload

    Error:
      type: string
      description: Detailed error message.
      example: "The request could not be understood by the server due to malformed syntax"

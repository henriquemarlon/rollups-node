//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Epoch = newEpochTable("public", "epoch", "")

type epochTable struct {
	postgres.Table

	// Columns
	ApplicationID        postgres.ColumnInteger
	Index                postgres.ColumnFloat
	FirstBlock           postgres.ColumnFloat
	LastBlock            postgres.ColumnFloat
	ClaimHash            postgres.ColumnString
	ClaimTransactionHash postgres.ColumnString
	Status               postgres.ColumnString
	VirtualIndex         postgres.ColumnFloat
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EpochTable struct {
	epochTable

	EXCLUDED epochTable
}

// AS creates new EpochTable with assigned alias
func (a EpochTable) AS(alias string) *EpochTable {
	return newEpochTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EpochTable with assigned schema name
func (a EpochTable) FromSchema(schemaName string) *EpochTable {
	return newEpochTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EpochTable with assigned table prefix
func (a EpochTable) WithPrefix(prefix string) *EpochTable {
	return newEpochTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EpochTable with assigned table suffix
func (a EpochTable) WithSuffix(suffix string) *EpochTable {
	return newEpochTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEpochTable(schemaName, tableName, alias string) *EpochTable {
	return &EpochTable{
		epochTable: newEpochTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newEpochTableImpl("", "excluded", ""),
	}
}

func newEpochTableImpl(schemaName, tableName, alias string) epochTable {
	var (
		ApplicationIDColumn        = postgres.IntegerColumn("application_id")
		IndexColumn                = postgres.FloatColumn("index")
		FirstBlockColumn           = postgres.FloatColumn("first_block")
		LastBlockColumn            = postgres.FloatColumn("last_block")
		ClaimHashColumn            = postgres.StringColumn("claim_hash")
		ClaimTransactionHashColumn = postgres.StringColumn("claim_transaction_hash")
		StatusColumn               = postgres.StringColumn("status")
		VirtualIndexColumn         = postgres.FloatColumn("virtual_index")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampzColumn("updated_at")
		allColumns                 = postgres.ColumnList{ApplicationIDColumn, IndexColumn, FirstBlockColumn, LastBlockColumn, ClaimHashColumn, ClaimTransactionHashColumn, StatusColumn, VirtualIndexColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns             = postgres.ColumnList{FirstBlockColumn, LastBlockColumn, ClaimHashColumn, ClaimTransactionHashColumn, StatusColumn, VirtualIndexColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return epochTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ApplicationID:        ApplicationIDColumn,
		Index:                IndexColumn,
		FirstBlock:           FirstBlockColumn,
		LastBlock:            LastBlockColumn,
		ClaimHash:            ClaimHashColumn,
		ClaimTransactionHash: ClaimTransactionHashColumn,
		Status:               StatusColumn,
		VirtualIndex:         VirtualIndexColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

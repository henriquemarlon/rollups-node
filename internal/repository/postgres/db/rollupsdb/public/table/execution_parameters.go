//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExecutionParameters = newExecutionParametersTable("public", "execution_parameters", "")

type executionParametersTable struct {
	postgres.Table

	// Columns
	ApplicationID         postgres.ColumnInteger
	SnapshotPolicy        postgres.ColumnString
	SnapshotRetention     postgres.ColumnInteger
	AdvanceIncCycles      postgres.ColumnInteger
	AdvanceMaxCycles      postgres.ColumnInteger
	InspectIncCycles      postgres.ColumnInteger
	InspectMaxCycles      postgres.ColumnInteger
	AdvanceIncDeadline    postgres.ColumnInteger
	AdvanceMaxDeadline    postgres.ColumnInteger
	InspectIncDeadline    postgres.ColumnInteger
	InspectMaxDeadline    postgres.ColumnInteger
	LoadDeadline          postgres.ColumnInteger
	StoreDeadline         postgres.ColumnInteger
	FastDeadline          postgres.ColumnInteger
	MaxConcurrentInspects postgres.ColumnInteger
	CreatedAt             postgres.ColumnTimestampz
	UpdatedAt             postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExecutionParametersTable struct {
	executionParametersTable

	EXCLUDED executionParametersTable
}

// AS creates new ExecutionParametersTable with assigned alias
func (a ExecutionParametersTable) AS(alias string) *ExecutionParametersTable {
	return newExecutionParametersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExecutionParametersTable with assigned schema name
func (a ExecutionParametersTable) FromSchema(schemaName string) *ExecutionParametersTable {
	return newExecutionParametersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExecutionParametersTable with assigned table prefix
func (a ExecutionParametersTable) WithPrefix(prefix string) *ExecutionParametersTable {
	return newExecutionParametersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExecutionParametersTable with assigned table suffix
func (a ExecutionParametersTable) WithSuffix(suffix string) *ExecutionParametersTable {
	return newExecutionParametersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExecutionParametersTable(schemaName, tableName, alias string) *ExecutionParametersTable {
	return &ExecutionParametersTable{
		executionParametersTable: newExecutionParametersTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newExecutionParametersTableImpl("", "excluded", ""),
	}
}

func newExecutionParametersTableImpl(schemaName, tableName, alias string) executionParametersTable {
	var (
		ApplicationIDColumn         = postgres.IntegerColumn("application_id")
		SnapshotPolicyColumn        = postgres.StringColumn("snapshot_policy")
		SnapshotRetentionColumn     = postgres.IntegerColumn("snapshot_retention")
		AdvanceIncCyclesColumn      = postgres.IntegerColumn("advance_inc_cycles")
		AdvanceMaxCyclesColumn      = postgres.IntegerColumn("advance_max_cycles")
		InspectIncCyclesColumn      = postgres.IntegerColumn("inspect_inc_cycles")
		InspectMaxCyclesColumn      = postgres.IntegerColumn("inspect_max_cycles")
		AdvanceIncDeadlineColumn    = postgres.IntegerColumn("advance_inc_deadline")
		AdvanceMaxDeadlineColumn    = postgres.IntegerColumn("advance_max_deadline")
		InspectIncDeadlineColumn    = postgres.IntegerColumn("inspect_inc_deadline")
		InspectMaxDeadlineColumn    = postgres.IntegerColumn("inspect_max_deadline")
		LoadDeadlineColumn          = postgres.IntegerColumn("load_deadline")
		StoreDeadlineColumn         = postgres.IntegerColumn("store_deadline")
		FastDeadlineColumn          = postgres.IntegerColumn("fast_deadline")
		MaxConcurrentInspectsColumn = postgres.IntegerColumn("max_concurrent_inspects")
		CreatedAtColumn             = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn             = postgres.TimestampzColumn("updated_at")
		allColumns                  = postgres.ColumnList{ApplicationIDColumn, SnapshotPolicyColumn, SnapshotRetentionColumn, AdvanceIncCyclesColumn, AdvanceMaxCyclesColumn, InspectIncCyclesColumn, InspectMaxCyclesColumn, AdvanceIncDeadlineColumn, AdvanceMaxDeadlineColumn, InspectIncDeadlineColumn, InspectMaxDeadlineColumn, LoadDeadlineColumn, StoreDeadlineColumn, FastDeadlineColumn, MaxConcurrentInspectsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns              = postgres.ColumnList{SnapshotPolicyColumn, SnapshotRetentionColumn, AdvanceIncCyclesColumn, AdvanceMaxCyclesColumn, InspectIncCyclesColumn, InspectMaxCyclesColumn, AdvanceIncDeadlineColumn, AdvanceMaxDeadlineColumn, InspectIncDeadlineColumn, InspectMaxDeadlineColumn, LoadDeadlineColumn, StoreDeadlineColumn, FastDeadlineColumn, MaxConcurrentInspectsColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return executionParametersTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ApplicationID:         ApplicationIDColumn,
		SnapshotPolicy:        SnapshotPolicyColumn,
		SnapshotRetention:     SnapshotRetentionColumn,
		AdvanceIncCycles:      AdvanceIncCyclesColumn,
		AdvanceMaxCycles:      AdvanceMaxCyclesColumn,
		InspectIncCycles:      InspectIncCyclesColumn,
		InspectMaxCycles:      InspectMaxCyclesColumn,
		AdvanceIncDeadline:    AdvanceIncDeadlineColumn,
		AdvanceMaxDeadline:    AdvanceMaxDeadlineColumn,
		InspectIncDeadline:    InspectIncDeadlineColumn,
		InspectMaxDeadline:    InspectMaxDeadlineColumn,
		LoadDeadline:          LoadDeadlineColumn,
		StoreDeadline:         StoreDeadlineColumn,
		FastDeadline:          FastDeadlineColumn,
		MaxConcurrentInspects: MaxConcurrentInspectsColumn,
		CreatedAt:             CreatedAtColumn,
		UpdatedAt:             UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

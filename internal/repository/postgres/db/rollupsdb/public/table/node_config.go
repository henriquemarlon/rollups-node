//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var NodeConfig = newNodeConfigTable("public", "node_config", "")

type nodeConfigTable struct {
	postgres.Table

	// Columns
	Key       postgres.ColumnString
	Value     postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type NodeConfigTable struct {
	nodeConfigTable

	EXCLUDED nodeConfigTable
}

// AS creates new NodeConfigTable with assigned alias
func (a NodeConfigTable) AS(alias string) *NodeConfigTable {
	return newNodeConfigTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new NodeConfigTable with assigned schema name
func (a NodeConfigTable) FromSchema(schemaName string) *NodeConfigTable {
	return newNodeConfigTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new NodeConfigTable with assigned table prefix
func (a NodeConfigTable) WithPrefix(prefix string) *NodeConfigTable {
	return newNodeConfigTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new NodeConfigTable with assigned table suffix
func (a NodeConfigTable) WithSuffix(suffix string) *NodeConfigTable {
	return newNodeConfigTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newNodeConfigTable(schemaName, tableName, alias string) *NodeConfigTable {
	return &NodeConfigTable{
		nodeConfigTable: newNodeConfigTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newNodeConfigTableImpl("", "excluded", ""),
	}
}

func newNodeConfigTableImpl(schemaName, tableName, alias string) nodeConfigTable {
	var (
		KeyColumn       = postgres.StringColumn("key")
		ValueColumn     = postgres.StringColumn("value")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{KeyColumn, ValueColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{ValueColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return nodeConfigTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Key:       KeyColumn,
		Value:     ValueColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

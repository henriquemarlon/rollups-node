//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Output = newOutputTable("public", "output", "")

type outputTable struct {
	postgres.Table

	// Columns
	InputEpochApplicationID  postgres.ColumnInteger
	InputIndex               postgres.ColumnFloat
	Index                    postgres.ColumnFloat
	RawData                  postgres.ColumnString
	Hash                     postgres.ColumnString
	OutputHashesSiblings     postgres.ColumnString
	ExecutionTransactionHash postgres.ColumnString
	CreatedAt                postgres.ColumnTimestampz
	UpdatedAt                postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OutputTable struct {
	outputTable

	EXCLUDED outputTable
}

// AS creates new OutputTable with assigned alias
func (a OutputTable) AS(alias string) *OutputTable {
	return newOutputTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OutputTable with assigned schema name
func (a OutputTable) FromSchema(schemaName string) *OutputTable {
	return newOutputTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OutputTable with assigned table prefix
func (a OutputTable) WithPrefix(prefix string) *OutputTable {
	return newOutputTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OutputTable with assigned table suffix
func (a OutputTable) WithSuffix(suffix string) *OutputTable {
	return newOutputTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOutputTable(schemaName, tableName, alias string) *OutputTable {
	return &OutputTable{
		outputTable: newOutputTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newOutputTableImpl("", "excluded", ""),
	}
}

func newOutputTableImpl(schemaName, tableName, alias string) outputTable {
	var (
		InputEpochApplicationIDColumn  = postgres.IntegerColumn("input_epoch_application_id")
		InputIndexColumn               = postgres.FloatColumn("input_index")
		IndexColumn                    = postgres.FloatColumn("index")
		RawDataColumn                  = postgres.StringColumn("raw_data")
		HashColumn                     = postgres.StringColumn("hash")
		OutputHashesSiblingsColumn     = postgres.StringColumn("output_hashes_siblings")
		ExecutionTransactionHashColumn = postgres.StringColumn("execution_transaction_hash")
		CreatedAtColumn                = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn                = postgres.TimestampzColumn("updated_at")
		allColumns                     = postgres.ColumnList{InputEpochApplicationIDColumn, InputIndexColumn, IndexColumn, RawDataColumn, HashColumn, OutputHashesSiblingsColumn, ExecutionTransactionHashColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                 = postgres.ColumnList{InputIndexColumn, RawDataColumn, HashColumn, OutputHashesSiblingsColumn, ExecutionTransactionHashColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return outputTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		InputEpochApplicationID:  InputEpochApplicationIDColumn,
		InputIndex:               InputIndexColumn,
		Index:                    IndexColumn,
		RawData:                  RawDataColumn,
		Hash:                     HashColumn,
		OutputHashesSiblings:     OutputHashesSiblingsColumn,
		ExecutionTransactionHash: ExecutionTransactionHashColumn,
		CreatedAt:                CreatedAtColumn,
		UpdatedAt:                UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

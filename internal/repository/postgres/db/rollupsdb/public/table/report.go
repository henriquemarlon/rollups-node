//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Report = newReportTable("public", "report", "")

type reportTable struct {
	postgres.Table

	// Columns
	InputEpochApplicationID postgres.ColumnInteger
	InputIndex              postgres.ColumnFloat
	Index                   postgres.ColumnFloat
	RawData                 postgres.ColumnString
	CreatedAt               postgres.ColumnTimestampz
	UpdatedAt               postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ReportTable struct {
	reportTable

	EXCLUDED reportTable
}

// AS creates new ReportTable with assigned alias
func (a ReportTable) AS(alias string) *ReportTable {
	return newReportTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReportTable with assigned schema name
func (a ReportTable) FromSchema(schemaName string) *ReportTable {
	return newReportTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReportTable with assigned table prefix
func (a ReportTable) WithPrefix(prefix string) *ReportTable {
	return newReportTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReportTable with assigned table suffix
func (a ReportTable) WithSuffix(suffix string) *ReportTable {
	return newReportTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReportTable(schemaName, tableName, alias string) *ReportTable {
	return &ReportTable{
		reportTable: newReportTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newReportTableImpl("", "excluded", ""),
	}
}

func newReportTableImpl(schemaName, tableName, alias string) reportTable {
	var (
		InputEpochApplicationIDColumn = postgres.IntegerColumn("input_epoch_application_id")
		InputIndexColumn              = postgres.FloatColumn("input_index")
		IndexColumn                   = postgres.FloatColumn("index")
		RawDataColumn                 = postgres.StringColumn("raw_data")
		CreatedAtColumn               = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn               = postgres.TimestampzColumn("updated_at")
		allColumns                    = postgres.ColumnList{InputEpochApplicationIDColumn, InputIndexColumn, IndexColumn, RawDataColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                = postgres.ColumnList{InputIndexColumn, RawDataColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return reportTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		InputEpochApplicationID: InputEpochApplicationIDColumn,
		InputIndex:              InputIndexColumn,
		Index:                   IndexColumn,
		RawData:                 RawDataColumn,
		CreatedAt:               CreatedAtColumn,
		UpdatedAt:               UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
